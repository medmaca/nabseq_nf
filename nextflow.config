params {
    help = false
    out_dir = null // "/vast/scratch/users/zeglinski.k/20231031_group_12_13/"
    fastq_dir = null // "/stornext/Projects/promethion/promethion_data/long_term/lab_ritchie/NABseq/NAbseq_outputs/basecalls_sup_12_13/"
    sample_sheet = null // "/vast/scratch/users/zeglinski.k/waf_batch_12_13.csv"
    num_consensus = 999
    igblast_databases = "$projectDir/references/igblast/"
    reference_sequences = "$projectDir/references/reference_sequences/"
    trim_3p = "A{20}N{90}"
    trim_5p = "TTTCTGTTGGTGCTGATATTGCTTT"
    enable_conda = false
    barcode_dirs = false
    medaka_model = "r941_min_sup_g507"
    trim_to_antibody = true
    // Defaults    
    max_memory = '256.GB'
    max_cpus = 32
    max_time = '48.h'
}
// change these as required!
process {
    executor = 'slurm'
    cache = 'lenient'
    cpus = { check_max(1 * task.attempt), 'cpus'
    }
    memory = { check_max(1.GB * task.attempt, 'memory')
    }
    time   = { check_max( 4.h  * task.attempt, 'time'    )
    }

    withLabel: process_tiny {
        // cpus = 1
        // memory = '1G'
        cpus = { check_max(1 * task.attempt), 'cpus'
        }
        memory = { check_max(1.GB * task.attempt, 'memory')
        }
        time   = { check_max( 4.h  * task.attempt, 'time'    )
        }
    }

    withLabel: process_low {
        // cpus = 2
        // memory = '6G'
        cpus = { check_max(2 * task.attempt), 'cpus'
        }
        memory = { check_max(6.GB * task.attempt, 'memory')
        }
        time   = { check_max( 4.h  * task.attempt, 'time'    )
        }
    }


     withLabel: process_medium {
        // cpus = 4
        // memory = '16G'
        cpus = { check_max(4 * task.attempt), 'cpus'
        }
    memory = { check_max(16.GB * task.attempt, 'memory')
        }
        time   = { check_max( 4.h  * task.attempt, 'time'    )
        }
    }

    withLabel: process_high {
        // cpus = 8
        // memory = '32G'
        cpus = { check_max(8 * task.attempt), 'cpus'
        }
    memory = { check_max(32.GB * task.attempt, 'memory')
        }
        time   = { check_max( 4.h  * task.attempt, 'time'    )
        }
    }
}

executor {
    name = "slurm"
    queueSize = 2000
    submitRateLimit = "10/1sec"
    exitReadTimeout = "30 min"
    jobName = {
        task.name // [] and " " not allowed in lsf job names
            .replace("[",
        "(")
            .replace("]",
        ")")
            .replace(" ",
        "_")
    }
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }
    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = false
            runOptions = '-B /vast -B /stornext -B /wehisan'
        }
    }

    conda {
        enabled = false // required for 22.08
        cacheDir = ""
        useMamba = true
        docker.enabled = false
    }
    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}